package main

import(
  "os"
  "fmt"
)

func isItCorrect(s []rune, s1 int, s2 int, s3 int) int{
  mystr := make([]rune,0)
  counter := 0
  for j := 0; j < len(s); j++ {
    if s[j] == '(' {
      if (len(mystr) == counter){
        mystr= append(mystr, 'p')
      } else{
        mystr[counter] = 'p'
      }
      counter += 1
      s1 +=1
    } else if s[j] == '[' {
      if (len(mystr) == counter){
        mystr= append(mystr, 's')
      } else{
        mystr[counter] = 's'
      }
      counter += 1
      s2 +=1
    } else if s[j] == '{' {
      if (len(mystr) == counter){
        mystr= append(mystr, 'c')
      } else{
        mystr[counter] = 'c'
      }
      counter += 1
      s3 +=1
    } else if s[j] == ')' {
      if s1 <= 0 {
        return 0
      }
      if mystr[counter - 1] != 'p' {
        return 0
      }
      counter -= 1
      s1 -=1
    } else if s[j] == ']' {
      if s2 <= 0 {
        return 0
      }
      if mystr[counter - 1] != 's' {
        return 0
      }
      counter -= 1
      s2 -=1
    } else if s[j] == '}'{
      if s3 <= 0 {
        return 0
      }
      if mystr[counter - 1] != 'c' {
        return 0
      }
      counter -= 1
      s3 -=1
    }
  }
  if (s1 == 0 && s2 == 0 && s3 == 0){
    return 1
  } else {
    return 0
  }
}

func main() {
  args:=make([]string, 0)
  if(nil == os.Args){
    return
  }
  args = os.Args
  for i := 0; i < len(args); i++{
    myString := []rune(args[i])
    if(i!=0){
      stackP := 0
      stackS := 0
      stackC := 0
      correct := 0
      correct = isItCorrect(myString, stackP, stackS, stackC)
      if (correct == 1){
        fmt.Println("OK")
      } else {
        fmt.Println("Error")
      }
    } else {
      if!(len(args) >= 2){
        fmt.Println()
      }
    }
  }
}